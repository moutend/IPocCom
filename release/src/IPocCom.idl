import "oaidl.idl";
import "ocidl.idl";
import "UIAutomationClient.idl";
import "OleAcc.idl";

typedef [v1_enum] enum {
	LOGLEVEL_NONE = 0,
	LOGLEVEL_INFO = 1,
	LOGLEVEL_WARN = 2,
	LOGLEVEL_FAIL = 3
} LOGLEVEL;

typedef [v1_enum] enum {
	TW_NONE = 0,
	TW_NEXT = 1,
	TW_PREVIOUS = 2,
	TW_FIRST_CHILD = 3,
	TW_LAST_CHILD = 4,
	TW_PARENT = 5
} TreeWalkerDirection;

typedef [v1_enum] enum {
	AA_NONE = 0,
	AA_IAccessible = 1,
	AA_IAccessible2 = 2,
	AA_IUIAutomation = 3
} AvailableAccessibilityAPI;

typedef INT64(__stdcall *IUIEventHandler)(INT64 eventId, IUIAutomationElement *pInterface);

typedef INT64(__stdcall *IAEventHandler)(INT64 eventId, INT64 childId, IAccessible *pInterface);

[
	object,
	dual,
	uuid(8196FA35-1F5F-43E0-A8F6-BDECF6615D70)
]
interface IPocCom : IDispatch {
	[id(1), local] HRESULT Start([in] LPWSTR logServerAddr, [in] LOGLEVEL level);
	[id(2), local] HRESULT Stop();
	[id(3), local] HRESULT SetMSAAEventHandler([in] IAEventHandler handleFunc);
	[id(4), local] HRESULT SetUIAEventHandler([in] IUIEventHandler handleFunc);
	[id(5), local] HRESULT GetIUIAutomationElement([in] TreeWalkerDirection direction, [in] IUIAutomationElement *pRootElement, [in] IUIAutomationElement **ppElement);
	[id(6), local] HRESULT UpdateTreeWalker();
	[id(7), local] HRESULT ElementFromHandle([in] UIA_HWND hwnd, [in] IUIAutomationElement **ppElement);
}
[
	uuid(0D9E116E-8B4F-4AC7-AD14-B04DEB4D833C)
	version(1.0),
	helpstring("Type library for PoC COM")
]
library PocComLib {
	importlib("stdole2.tlb");
	[
		uuid(BD44057A-88AA-4A7B-BD7F-1905BC96E974)
	]
	coclass PocCom
	{
		[default] interface IPocCom;
	}
}
